// PointLightedCube.js (c) 2012 matsuda
// Vertex shader program
var VSHADER_SOURCE =
  'attribute vec4 a_Position;\n' +
  'attribute vec4 a_Color;\n' +
  'attribute vec4 a_Normal;\n' +
  'uniform mat4 u_MvpMatrix;\n' +
  'uniform mat4 u_ModelMatrix;\n' +    // Model matrix
  'uniform mat4 u_NormalMatrix;\n' +   // Coordinate transformation matrix of the normal
  'uniform vec3 u_LightColor;\n' +     // Light color
  'uniform vec3 u_LightPosition;\n' +  // Position of the light source
  'uniform vec3 u_AmbientLight;\n' +   // Ambient light color
  'varying vec4 v_Color;\n' +
  'void main() {\n' +
  '  gl_Position = u_MvpMatrix * a_Position;\n' +
     // Recalculate the normal based on the model matrix and make its length 1.
  '  vec3 normal = normalize(vec3(u_NormalMatrix * a_Normal));\n' +
     // Calculate world coordinate of vertex
  '  vec4 vertexPosition = u_ModelMatrix * a_Position;\n' +
     // Calculate the light direction and make it 1.0 in length
  '  vec3 lightDirection = normalize(u_LightPosition - vec3(vertexPosition));\n' +
     // Calculate the dot product of the normal and light direction
  '  float nDotL = max(dot(normal, lightDirection), 0.0);\n' +
     // Calculate the color due to diffuse reflection
  '  vec3 diffuse = u_LightColor * a_Color.rgb * nDotL;\n' +
     // Calculate the color due to ambient reflection
  '  vec3 ambient = u_AmbientLight * a_Color.rgb;\n' +
     // Add the surface colors due to diffuse reflection and ambient reflection
  '  v_Color = vec4(diffuse + ambient, a_Color.a);\n' +
  '}\n';

// Fragment shader program
var FSHADER_SOURCE =
  '#ifdef GL_ES\n' +
  'precision mediump float;\n' +
  '#endif\n' +
  'varying vec4 v_Color;\n' +
  'void main() {\n' +
  '  gl_FragColor = v_Color;\n' +
  '}\n';

var currentAngle = 0;

var tick = function () {}

function main() {
  // Retrieve <canvas> element
  var canvas = document.getElementById('gl-canvas');

  // Get the rendering context for WebGL
  var gl = getWebGLContext(canvas);
  if (!gl) {
    console.log('Failed to get the rendering context for WebGL');
    return;
  }

  // Initialize shaders
  if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
    console.log('Failed to intialize shaders.');
    return;
  }

  // Set the vertex coordinates, the color and the normal
  var n = initVertexBuffers(gl);
  if (n < 0) {
    console.log('Failed to set the vertex information');
    return;
  }

  // Set the clear color and enable the depth test
  gl.clearColor(0.0, 0.0, 0.0, 1.0);
  gl.enable(gl.DEPTH_TEST);

  // Get the storage locations of uniform variables and so on
  var u_ModelMatrix = gl.getUniformLocation(gl.program, 'u_ModelMatrix');
  var u_MvpMatrix = gl.getUniformLocation(gl.program, 'u_MvpMatrix');
  var u_NormalMatrix = gl.getUniformLocation(gl.program, 'u_NormalMatrix');
  var u_LightColor = gl.getUniformLocation(gl.program, 'u_LightColor');
  var u_LightPosition = gl.getUniformLocation(gl.program, 'u_LightPosition');
  var u_AmbientLight = gl.getUniformLocation(gl.program, 'u_AmbientLight');
  if (!u_MvpMatrix || !u_NormalMatrix || !u_LightColor || !u_LightPositionã€€|| !u_AmbientLight) {
    console.log('Failed to get the storage location');
    return;
  }

  var vpMatrix = new Matrix4();   // View projection matrix
  vpMatrix.setPerspective(30, canvas.width/canvas.height, 1, 100);
  vpMatrix.lookAt(6, 6, 14, 0, 0, 0, 0, 1, 0);

  // Set the light color (white)
  gl.uniform3f(u_LightColor, 1.0, 1.0, 1.0);
  // Set the light direction (in the world coordinate)
  gl.uniform3f(u_LightPosition, 2.5, 2.5, 5);
  // Set the ambient light
  gl.uniform3f(u_AmbientLight, 0.75, 0.75, 0.75);

  var modelMatrix = new Matrix4();  // Model matrix
  var mvpMatrix = new Matrix4();    // Model view projection matrix
  var normalMatrix = new Matrix4(); // Transformation matrix for normals

  tick = function() {

    // Calculate the model matrix
    modelMatrix.setRotate(currentAngle, 0, 1, 0); // Rotate around the y-axis
    // Pass the model matrix to u_ModelMatrix
    gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);

    // Pass the model view projection matrix to u_MvpMatrix
    mvpMatrix.set(vpMatrix).multiply(modelMatrix);
    gl.uniformMatrix4fv(u_MvpMatrix, false, mvpMatrix.elements);

    // Pass the matrix to transform the normal based on the model matrix to u_NormalMatrix
    normalMatrix.setInverseOf(modelMatrix);
    normalMatrix.transpose();
    gl.uniformMatrix4fv(u_NormalMatrix, false, normalMatrix.elements);

    // Clear color and depth buffer
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    // Draw the cube
    gl.drawArrays(gl.TRIANGLES, 0, n);

    // requestAnimationFrame(tick, canvas); // Request that the browser ?calls tick
    // Register the event handler to be called when keys are pressed
    document.onkeydown = function(ev){ keydown(ev); };
  };
  tick();
}

function initVertexBuffers(gl) {

  const data = loadMeshData();
  console.log(data)

  var vertices = data.vertices.map((v) => v/1.3);

  // Colors
  var colors = new Float32Array([... Array(data.vertices.length)].map(() => [0.051, 0.278, 0.631, 1.0]).flat(1))

  // Normal
  var normals = data.vertices

  // Indices of the vertices
  var indices = [... Array(data.vertices.length)].map((v, i) => i)

  // Write the vertex property to buffers (coordinates, colors and normals)
  if (!initArrayBuffer(gl, 'a_Position', vertices, 3, gl.FLOAT)) return -1;
  if (!initArrayBuffer(gl, 'a_Color', colors, 4, gl.FLOAT)) return -1;
  if (!initArrayBuffer(gl, 'a_Normal', normals, 3, gl.FLOAT)) return -1;

  return indices.length / 3;
}

function initArrayBuffer(gl, attribute, data, num, type) {
  // Create a buffer object
  var buffer = gl.createBuffer();
  if (!buffer) {
    console.log('Failed to create the buffer object');
    return false;
  }
  // Write date into the buffer object
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
  // Assign the buffer object to the attribute variable
  var a_attribute = gl.getAttribLocation(gl.program, attribute);
  if (a_attribute < 0) {
    console.log('Failed to get the storage location of ' + attribute);
    return false;
  }
  gl.vertexAttribPointer(a_attribute, num, type, false, 0, 0);
  // Enable the assignment of the buffer object to the attribute variable
  gl.enableVertexAttribArray(a_attribute);

  return true;
}

// Rotation angle (degrees/second)
var ANGLE_STEP = 2.0;
// Last time that this function was called
var g_last = Date.now();
function animate(angle) {
  // Calculate the elapsed time
  var now = Date.now();
  var elapsed = now - g_last;
  g_last = now;
  // Update the current rotation angle (adjusted by the elapsed time)
  var newAngle = angle + (ANGLE_STEP * elapsed) / 1000.0;
  return newAngle %= 360;
}

function loadMeshData() {
  const string = `
  v -1.552671 -5.544443 -0.380425
  v -1.290538 -5.913335 0.087237
  v -1.442100 -5.609156 -0.273843
  v -1.441885 -5.499085 -0.283700
  v -1.499523 -4.126958 0.097183
  v -1.233549 -5.562481 -0.310853
  v -1.632264 -5.068200 -0.716793
  v -0.693419 -3.761741 -2.770646
  v 0.089136 -3.887530 -2.808407
  v -1.624164 -3.782269 -1.900815
  v -2.091401 -2.255088 -0.014525
  v -0.001565 -6.161590 0.787746
  v -0.032495 -4.280960 1.816307
  v -0.852969 -4.416159 1.074491
  v -0.444099 -3.752378 3.061970
  v -1.791081 -2.668096 2.233986
  v -0.922737 -3.741860 2.036236
  v 0.037210 -2.921696 3.384732
  v -0.759367 -2.323065 3.124949
  v -0.285844 -2.545181 3.546970
  v -0.319130 -1.322906 3.567743
  v -0.094469 -2.032015 3.703060
  v -2.940877 -0.045144 -1.366928
  v -2.795201 -0.934332 -0.862202
  v -2.544667 -0.560954 -0.149813
  v -2.834558 0.442968 -0.881184
  v -2.886964 0.707947 -0.886396
  v -2.822736 0.523920 -1.098120
  v -2.754837 0.662043 -0.935357
  v -2.782980 0.658325 -0.799708
  v -2.752716 0.639597 -0.540295
  v -2.780664 0.722470 -0.803261
  v -2.008000 1.625806 -2.362824
  v -0.560585 1.312099 -3.429306
  v -2.281772 -0.902893 -1.293723
  v -2.526753 0.077055 -1.347906
  v -2.457886 -1.145989 -0.142585
  v -2.584927 0.586561 -0.783000
  v -2.677494 0.423264 -0.718691
  v -2.630687 0.665493 -0.753106
  v -2.528819 0.811877 -0.619912
  v -2.608914 0.791298 -0.587916
  v -2.593746 0.801068 -0.481788
  v -2.557163 0.663163 -0.248869
  v -2.630668 1.042359 1.276453
  v -1.017353 2.280447 -2.879958
  v -0.841740 3.198781 -1.852672
  v -2.529046 1.500944 -1.108262
  v -1.703050 3.026701 -0.878458
  v -0.625165 3.521388 -0.460988
  v -2.468851 -1.797984 1.069134
  v -2.163573 -0.025828 2.041022
  v -1.328427 -0.128443 2.435797
  v -1.971814 0.727291 2.052885
  v -1.891000 0.402606 1.913080
  v -1.669966 0.201030 1.827044
  v -1.705332 0.182661 1.890531
  v -1.755455 0.300497 1.825171
  v -1.750977 0.305204 1.909598
  v -1.776808 0.419638 1.914545
  v -1.718261 0.802551 1.924007
  v -1.620577 0.179079 1.931294
  v -1.637124 0.260951 1.922273
  v -1.424499 0.393523 1.994486
  v -1.730896 0.241887 2.130636
  v -1.431628 0.186243 2.090749
  v -1.431887 0.151177 2.265362
  v -1.432347 0.252090 2.083785
  v -1.430474 0.210138 2.255546
  v -0.858580 0.367490 2.348707
  v -1.825645 1.006703 2.405504
  v -1.610249 0.824214 2.088297
  v -1.611650 0.868704 2.265922
  v -1.621005 0.897865 2.100099
  v -1.611650 0.900393 2.265922
  v -1.162250 0.927936 2.278443
  v -0.601809 -1.133952 3.507237
  v -0.993721 0.291624 2.003417
  v -0.885971 0.891431 1.985260
  v -0.833399 0.907715 1.998659
  v -0.932146 0.827116 2.071413
  v -0.947701 0.936330 2.067601
  v -0.182409 1.326240 2.981292
  v -0.407445 -1.166178 3.765620
  v -0.225341 -1.031132 4.065490
  v -0.403358 -1.100621 3.758895
  v -2.356182 2.117074 1.367690
  v -1.387047 2.169189 2.445847
  v 0.365972 2.570814 2.444174
  v -0.806443 3.267161 1.441062
  v 1.062087 -5.987157 0.250292
  v 1.121230 -5.911242 0.076911
  v 0.639502 -5.500838 -0.338266
  v 1.276706 -5.907533 0.045261
  v 1.276138 -5.836434 0.046758
  v 1.564641 -3.764054 -2.077326
  v 1.463316 -5.556005 -0.394448
  v 1.656944 -5.208902 -0.621684
  v 1.373880 -5.902282 -0.016718
  v 1.345940 -5.851363 -0.065162
  v 1.427746 -5.619339 -0.281777
  v 1.381007 -5.667354 0.007595
  v 1.444191 -5.501328 -0.297257
  v 1.534139 -3.633482 0.203653
  v 1.977243 -2.502949 -0.175440
  v 2.301086 -0.660468 -1.442432
  v 2.464408 -1.011866 -0.088161
  v 0.756142 -4.482969 1.103972
  v 1.172503 -3.468904 2.330609
  v 0.500287 -3.728546 3.003496
  v 1.896141 -2.294331 2.231184
  v 2.397014 -2.008015 1.063866
  v 0.819654 -2.313391 3.138958
  v 0.286259 -1.457062 3.571287
  v 0.008504 -1.403116 3.777315
  v 0.298705 2.034489 -3.360420
  v 2.629508 -1.154034 -0.428946
  v 2.569978 -0.449725 -0.286933
  v 2.172595 1.608078 -2.094591
  v 2.509065 0.457034 -1.016032
  v 2.687097 0.424193 -0.720638
  v 2.761122 0.661960 -0.933127
  v 2.666610 0.709652 -0.752268
  v 2.530476 0.675212 -0.295269
  v 2.552341 0.802810 -0.424533
  v 1.516776 1.455951 -2.900924
  v 0.572912 3.398541 -1.498741
  v 1.525421 3.046887 -1.430649
  v 2.327488 2.183466 1.331011
  v 2.849755 -0.781281 -1.155656
  v 2.917165 0.491361 -1.172889
  v 2.831212 0.619354 -0.795537
  v 2.834337 0.414190 -0.926474
  v 2.791292 0.660332 -0.805721
  v 2.788488 0.717851 -0.807483
  v 1.698849 -0.682765 2.542314
  v 0.816971 0.411172 2.352704
  v -0.018977 0.513584 3.037547
  v 1.042621 0.890923 2.524185
  v 0.989447 0.288987 1.997404
  v 1.278030 0.936611 2.118660
  v 0.839821 0.916224 2.001895
  v 0.891885 0.894723 1.985979
  v 0.936274 0.825041 2.079214
  v 0.954549 0.941501 2.071273
  v 1.572306 1.011168 2.473668
  v 2.678267 1.625369 -0.218282
  v 1.494439 0.182174 1.962810
  v 1.679356 0.203950 1.824262
  v 1.630336 0.180697 1.931096
  v 1.647039 0.262417 1.921871
  v 1.442821 0.186450 2.088280
  v 1.430765 0.150744 2.264486
  v 1.443591 0.253333 2.081897
  v 1.433120 0.206365 2.255620
  v 1.727176 0.245290 2.154858
  v 1.715693 0.184470 1.890561
  v 1.764789 0.302034 1.824948
  v 1.760701 0.306231 1.909733
  v 2.083542 0.465585 2.037194
  v 1.865935 0.708928 1.846380
  v 1.786927 0.419614 1.914537
  v 1.619953 0.820590 2.088168
  v 1.619962 0.867291 2.265381
  v 1.630232 0.896789 2.099650
  v 1.619962 0.898989 2.265381
  v 1.911896 0.824607 2.112181
  v 2.380198 1.189170 1.886375
  v 0.691125 -1.227026 3.411021
  v 0.438048 -1.060044 3.681455
  v 0.347286 -1.010131 3.988608
  v 0.414563 -1.163031 3.764685
  v 0.422348 -1.083070 3.747511
  v 1.616698 2.013528 2.401620
  v 0.767873 3.396899 1.059628
  vn -0.9093 0.0389 0.4144
  vn -0.6717 0.0674 0.7378
  vn 0.0963 0.9953 -0.0067
  vn 0.6104 0.3962 0.6859
  vn 0.9999 0.0100 -0.0085
  vn -0.6385 0.6209 -0.4548
  vn -0.3033 -0.7389 -0.6018
  vn -0.9578 -0.1135 0.2640
  vn -0.5807 -0.2403 0.7778
  vn 0.9876 -0.1559 0.0189
  vn 0.9905 -0.0293 0.1342
  vn 0.0351 0.8037 -0.5940
  vn 0.8645 -0.0945 -0.4937
  vn -0.5780 -0.3989 0.7119
  vn 0.9831 -0.1188 0.1391
  vn -0.7157 0.1716 0.6770
  vn -0.7059 -0.6304 0.3229
  vn -0.3923 -0.1267 0.9111
  vn -0.4681 -0.8585 0.2096
  vn -0.5943 -0.2252 0.7721
  vn -0.6332 -0.6924 0.3460
  vn -0.9744 0.1853 0.1271
  vn -0.9920 0.0424 0.1188
  vn -0.2279 0.0427 0.9727
  vn -0.1775 0.9783 -0.1064
  vn -0.1289 -0.9661 -0.2237
  vn 0.5819 0.6542 -0.4831
  vn -0.4237 0.5296 0.7349
  vn -0.5587 -0.0098 -0.8293
  vn -0.9727 0.1980 0.1208
  vn -0.1746 -0.5694 -0.8033
  vn 0.0667 -0.3947 0.9164
  vn 0.9896 0.0164 -0.1429
  vn 0.0994 0.9842 -0.1463
  vn -0.9375 0.3215 0.1332
  vn -0.9983 0.0059 -0.0586
  vn 0.5797 -0.5856 0.5666
  vn -0.1820 0.7208 -0.6688
  vn 0.5191 -0.3784 -0.7664
  vn -0.5988 -0.6231 0.5032
  vn 0.2640 0.9276 0.2643
  vn -0.5568 0.7877 0.2636
  vn 0.6426 0.5621 0.5206
  vn 0.3542 -0.2941 0.8877
  vn -0.1506 -0.1056 -0.9829
  vn -0.2587 0.4312 0.8644
  vn -0.7569 -0.6491 0.0763
  vn 0.4330 -0.0118 -0.9013
  vn -0.4465 -0.5868 0.6755
  vn 0.0062 0.0446 -0.9990
  vn 0.8809 0.2240 0.4169
  vn -0.5529 0.6567 -0.5129
  vn 0.9749 0.2212 -0.0252
  vn 0.0608 -0.9981 0.0118
  vn 0.1963 -0.1271 0.9723
  vn 0.0279 0.0000 -0.9996
  vn -0.5091 0.0000 0.8607
  vn 0.0794 0.0680 0.9945
  vn 0.8559 -0.0518 0.5146
  vn -0.5463 0.0000 -0.8376
  vn 0.0657 -0.6574 0.7507
  vn 0.8104 -0.0139 0.5857
  vn -0.6931 -0.1235 -0.7102
  vn -0.1639 0.0111 0.9864
  vn 0.1192 -0.8314 0.5427
  vn -0.3460 0.0982 0.9331
  vn -0.6984 -0.4484 -0.5579
  vn -0.1930 0.9620 0.1929
  vn 0.1700 0.1055 0.9798
  vn -0.4767 -0.1332 -0.8689
  vn 0.1071 0.5266 0.8434
  vn -0.2460 0.9624 -0.1152
  vn -0.7875 0.1113 0.6062
  vn -0.4181 -0.7058 0.5718
  vn -0.5117 -0.6634 0.5460
  vn -0.6684 -0.1178 0.7344
  vn -0.0070 -0.8658 0.5004
  vn 0.6926 -0.0097 0.7212
  vn 0.7629 -0.3468 0.5455
  vn -0.8019 0.1559 0.5767
  vn 0.8741 -0.4857 0.0030
  vn -0.2839 0.4203 0.8618
  vn -0.3332 -0.7394 -0.5850
  vn -0.9565 0.1608 -0.2435
  vn 0.1336 -0.0728 0.9884
  vn 0.0359 -0.1537 0.9875
  vn -0.9896 0.1390 -0.0366
  vn -0.5939 0.7909 0.1476
  vn 0.4165 0.4706 0.7779
  vn 0.3614 -0.0898 0.9281
  vn 0.3913 -0.0485 0.9190
  vn -0.3587 0.3903 -0.8479
  vn -0.1906 -0.2160 0.9576
  vn -0.8682 -0.2489 0.4294
  vn 0.9391 -0.0448 -0.3407
  vn -0.6467 0.6103 0.4576
  vn 0.8567 0.0043 -0.5158
  vn 0.5126 0.8312 0.2153
  vn 0.0370 -0.8937 -0.4472
  vn -0.7273 -0.4302 0.5349
  vn 0.6751 -0.1210 0.7277
  vn -0.6031 -0.0871 -0.7929
  vn 0.7557 -0.3441 0.5573
  vn -0.9999 -0.0119 -0.0052
  vn 0.8766 0.3388 -0.3416
  vn 0.8554 0.0575 0.5147
  vn 0.4566 -0.0362 -0.8889
  vn 0.0480 -0.9137 0.4036
  vn 0.3413 0.9374 -0.0688
  vn 0.2717 0.0545 -0.9608
  vn 0.5145 -0.4928 0.7017
  vn -0.2522 0.3847 -0.8879
  vn 0.3163 0.7424 -0.5906
  vn 0.4230 -0.6841 0.5942
  vn 0.9645 -0.1654 -0.2060
  vn 0.1131 -0.5703 -0.8136
  vn 0.0013 -0.9938 -0.1112
  vn -0.1430 0.0897 0.9856
  vn 0.3011 -0.6895 -0.6587
  vn 0.9140 -0.3715 -0.1634
  vn 0.9057 0.2134 0.3663
  vn 0.3548 0.7540 0.5528
  vn -0.0392 0.9652 0.2586
  vn 0.2455 -0.0949 -0.9647
  vn -0.6465 0.5595 0.5187
  vn -0.4209 0.9048 -0.0651
  vn 0.0731 0.9670 0.2440
  vn 0.3488 -0.7486 0.5639
  vn -0.4284 -0.0144 -0.9035
  vn 0.9662 -0.2445 0.0821
  vn 0.3884 -0.0508 -0.9201
  vn -0.9162 0.2247 0.3317
  vn -0.8177 -0.4625 0.3427
  vn -0.3305 0.8011 0.4990
  vn -0.9707 0.2278 -0.0761
  vn -0.4091 0.0000 -0.9125
  vn -0.0077 -0.9670 0.2548
  vn 0.4647 0.0000 0.8855
  vn -0.2426 -0.8735 0.4221
  vn 0.2011 0.1459 0.9686
  vn 0.9748 0.0000 0.2230
  vn 0.0278 -0.8774 0.4789
  vn 0.4988 0.7415 0.4488
  vn 0.4745 -0.1581 -0.8659
  vn 0.0677 0.3826 0.9214
  vn 0.2894 0.3852 0.8763
  vn -0.5788 -0.8146 -0.0387
  vn 0.9521 -0.0273 0.3047
  vn 0.7913 0.0538 0.6091
  vn 0.1307 -0.5545 0.8218
  vn 0.9884 0.1491 -0.0295
  vn 0.7534 0.5444 0.3688
  vn -0.2160 -0.9757 -0.0357
  vn 0.7537 0.3505 0.5560
  vn -0.1078 0.1533 0.9823
  vn 0.5600 -0.3904 0.7307
  vn 0.8991 -0.0408 -0.4358
  vn 0.4629 -0.4584 -0.7586
  vn -0.6201 0.4100 0.6688
  vn 0.9381 0.2126 0.2735
  vn -0.1550 -0.0878 -0.9840
  vn 0.8133 -0.5530 0.1811
  vn -0.3965 -0.6205 -0.6766
  vn 0.9450 -0.0498 0.3233
  vn -0.3364 0.9236 0.1836
  vn 0.0384 0.1990 0.9792
  vn -0.7022 0.4180 -0.5764
  vn 0.1741 0.9079 -0.3813
  vn 0.9790 -0.0241 0.2025
  vn 0.9297 -0.3589 -0.0833
  vn 0.0216 0.7578 -0.6521
  vn 0.8058 -0.2331 -0.5445
  vn -0.6333 -0.6114 0.4744
  vn -0.8308 0.4119 0.3744
  vn 0.7289 0.5676 -0.3829
  vn 0.6046 0.7933 0.0724
  vn -0.5665 -0.0570 0.8221
  vn -0.5474 -0.4792 -0.6862
  vn 0.7792 0.1280 -0.6135
  vn -0.0521 0.9985 0.0166
  vn -0.7191 0.6938 0.0389
  vn -0.7324 0.5848 -0.3488
  vn 0.2948 -0.0635 -0.9535
  vn 0.5152 -0.6909 0.5071
  vn 0.9313 0.3577 -0.0693
  vn 0.5681 0.8194 -0.0758
  vn 0.4731 -0.0940 0.8760
  vn -0.9059 -0.1390 0.3999
  vn 0.0040 0.9714 0.2372
  vn -0.3643 0.1614 0.9172
  vn -0.0740 0.9682 0.2389
  vn -0.3500 -0.7337 0.5824
  vn 0.1921 0.2204 -0.9563
  vn -0.9729 -0.2224 0.0640
  vn -0.1207 0.7539 0.6458
  vn -0.9918 -0.0241 -0.1253
  vn 0.1947 0.4076 0.8922
  vn 0.0488 -0.0321 0.9983
  vn -0.3261 -0.3138 0.8917
  vn 0.2296 -0.9437 0.2382
  vn 0.0521 0.1654 -0.9848
  vn 0.0124 -0.7862 0.6178
  vn 0.3938 -0.8817 0.2598
  vn -0.5328 -0.1052 -0.8397
  vn 0.8270 0.1368 0.5454
  vn 0.6657 -0.7234 -0.1832
  vn -0.2687 0.0773 0.9601
  vn -0.1792 -0.5291 -0.8294
  vn -0.9204 0.2419 0.3071
  vn -0.0130 0.0326 0.9994
  vn -0.0291 -0.1002 -0.9945
  vn -0.3768 -0.8319 0.4074
  vn 0.9089 -0.0139 0.4167
  vn -0.5720 -0.7478 0.3370
  vn -0.5533 0.1981 -0.8091
  vn -0.0636 -0.9060 -0.4184
  vn -0.1999 0.0190 -0.9796
  vn -0.8482 0.0044 -0.5296
  vn 0.4608 -0.7955 0.3935
  vn 0.8764 0.0232 -0.4811
  vn -0.9637 0.1019 -0.2470
  vn 0.0503 -0.1368 -0.9893
  vn -0.0253 -0.8734 0.4863
  vn 0.3097 -0.0991 -0.9457
  vn 0.4056 -0.0445 0.9130
  vn 0.9882 -0.1524 0.0168
  vn -0.8702 0.1037 0.4817
  vn 0.4993 -0.8493 0.1711
  vn 0.4827 -0.1586 0.8613
  vn 0.0015 -0.8939 0.4483
  vn 0.5382 -0.0134 0.8427
  vn 0.7811 -0.1313 -0.6105
  vn -0.7429 -0.6643 -0.0828
  vn 0.8977 -0.0129 0.4403
  vn -0.8925 -0.1124 -0.4368
  vn -0.7443 0.6450 -0.1731
  vn -0.4606 -0.8830 0.0904
  vn 0.4670 -0.3627 0.8065
  vn -0.9724 -0.0404 0.2297
  vn 0.6571 0.7466 -0.1036
  vn -0.2291 0.0186 0.9732
  vn 0.6857 0.7090 0.1648
  vn -0.8835 -0.2713 -0.3819
  vn 0.8049 0.1737 0.5674
  vn -0.2136 0.9176 -0.3353
  vn -0.4095 -0.0479 -0.9110
  vn 0.0395 0.9497 0.3107
  vn -0.8218 0.4890 -0.2926
  vn -0.5444 0.7045 0.4553
  vn 0.5348 -0.1407 -0.8332
  vn -0.8360 0.1668 0.5227
  vn -0.1623 -0.8100 0.5635
  vn 0.3176 0.0690 0.9457
  vn -0.3215 -0.0339 0.9463
  vn -0.1895 -0.0985 0.9769
  vn 0.9110 -0.1425 0.3870
  vn 0.3048 0.1373 0.9425
  vn -0.9329 0.3547 -0.0625
  vn -0.5876 0.1038 0.8025
  vn 0.7520 -0.6555 0.0687
  vn -0.1870 0.2199 -0.9574
  vn 0.9721 -0.2273 0.0581
  vn -0.1120 -0.9937 0.0062
  vn -0.0488 -0.9890 -0.1398
  vn 0.0793 0.1381 -0.9872
  vn 0.6399 -0.1982 0.7425
  vn -0.3093 -0.9432 0.1210
  vn 0.2320 -0.7747 0.5882
  vn 0.1761 0.9623 0.2071
  vn 0.2834 0.9408 -0.1860
  vn 0.2159 0.3706 0.9034
  vn 0.0988 -0.2181 -0.9709
  vn 0.5992 0.5416 -0.5896
  vn 0.9580 0.1084 0.2655
  vn 0.6004 -0.7887 -0.1322
  vn 0.2674 -0.9623 0.0504
  vn 0.1759 0.3237 0.9297
  vn 0.4252 0.0143 0.9050
  vn 0.5830 0.0325 0.8118
  vn -0.0507 0.9905 0.1276
  vn 0.8412 0.4170 0.3442
  vn 0.9997 -0.0245 -0.0034
  vn -0.6437 0.6219 -0.4459
  vn 0.9738 -0.2173 -0.0671
  vn 0.9840 -0.0912 -0.1530
  vn 0.9366 -0.2949 -0.1895
  vn 0.9966 -0.0814 -0.0121
  vn 0.9349 -0.2938 -0.1993
  vn 0.9838 -0.0891 0.1554
  vn 0.9659 -0.2306 0.1177
  vn -0.9472 0.0261 0.3194
  vn -0.9570 -0.0714 0.2812
  vn -0.9184 0.0226 0.3950
  vn -0.9115 -0.1729 0.3733
  vn -0.8977 -0.0827 0.4328
  vn -0.8891 -0.0926 0.4482
  vn -0.7012 -0.0469 0.7114
  vn -0.7848 -0.2843 0.5506
  vn -0.4975 -0.3715 0.7839
  vn -0.6810 -0.6219 0.3866
  vn -0.6029 -0.1707 0.7793
  vn -0.6117 -0.1675 0.7732
  vn -0.6112 -0.1689 0.7732
  vn -0.3743 0.3126 0.8730
  vn -0.0495 0.9651 -0.2572
  vn -0.9731 0.2295 0.0177
  vn 0.9702 -0.0482 0.2373
  vn 0.1884 -0.1313 -0.9733
  vn -0.0625 -0.0904 -0.9939
  vn -0.9984 -0.0572 0.0041
  vn -0.9989 -0.0126 -0.0450
  vn -0.9989 -0.0138 -0.0447
  vn -0.9780 0.1203 0.1702
  vn -0.9819 -0.1248 -0.1422
  vn -0.9208 -0.3285 -0.2103
  vn -0.9755 -0.2072 -0.0739
  vn -0.9852 -0.1472 -0.0881
  vn -0.9266 -0.3275 -0.1846
  vn 0.8630 -0.1800 0.4720
  vn -0.9754 0.0488 -0.2148
  vn -0.9976 0.0324 -0.0617
  vn 0.3479 0.9372 -0.0259
  vn 0.3285 -0.0651 0.9423
  vn 0.3898 0.1414 0.9100
  vn 0.8854 -0.1597 0.4366
  vn 0.0578 -0.0407 -0.9975
  vn -0.6203 0.0657 0.7816
  vn 0.7215 -0.3964 0.5678
  vn -0.0843 0.9735 -0.2126
  vn -0.7258 0.2516 0.6402
  vn -0.2028 0.1655 0.9651
  vn 0.8427 0.4859 -0.2316
  vn 0.0921 0.5431 0.8346
  vn -0.9174 -0.0824 -0.3892
  vn -0.2801 0.2919 0.9145
  vn 0.3298 0.9151 0.2322
  vn -0.3436 -0.7805 0.5223
  vn 0.9215 -0.0354 0.3867
  vn 0.7362 -0.1650 0.6564
  vn 0.1628 -0.4560 -0.8749
  vn 0.8582 0.0339 0.5121
  vn 0.8403 0.0335 0.5411
  vn -0.9981 0.0000 -0.0618
  vn 0.5662 -0.6110 0.5533
  vn -0.3407 0.0347 0.9395
  vn -0.2487 -0.0117 0.9685
  vn -0.9809 -0.0280 0.1924
  vn -0.8411 -0.2369 0.4863
  vn 0.9749 0.1457 0.1683
  vn -0.8048 -0.2067 0.5564
  vn 0.8143 -0.1522 0.5601
  vn -0.8433 -0.1016 0.5278
  vn -0.6773 -0.1102 -0.7274
  vn -0.0924 -0.5088 -0.8559
  vn -0.3611 0.9192 -0.1569
  vn -0.4405 0.8944 0.0776
  vn -0.1624 0.7115 0.6837
  vn 0.8576 0.3681 -0.3592
  vn 0.0568 0.8500 0.5237
  vn 0.9648 0.0381 -0.2604
  vn 0.7924 0.6087 -0.0398
  vn -0.9690 0.2470 0.0062
  vn 0.9984 0.0000 -0.0563
  vn -0.8098 -0.1068 -0.5768
  vn -0.9682 -0.2377 0.0786
  vn -0.0985 0.7502 -0.6538
  vn 0.2941 -0.7833 0.5477
  vn -0.7895 0.4096 0.4570
  vn 0.9248 0.0256 0.3796
  vn 0.8255 -0.5344 0.1817
  vn 0.8359 -0.4949 0.2373
  vn 0.5140 0.5807 -0.6314
  vn 0.9037 -0.4029 -0.1452
  vn -0.8466 -0.5223 0.1025
  vn -0.8485 -0.5239 -0.0746
  vn -0.0482 -0.6725 -0.7385
  vn -0.1633 -0.7898 -0.5912
  vn -0.3044 -0.8300 -0.4673
  vn -0.1512 -0.8126 -0.5629
  vn 0.1991 -0.7492 -0.6318
  vn 0.0521 -0.7529 -0.6561
  vn 0.0817 -0.8260 -0.5577
  vn 0.0094 -0.6301 -0.7764
  vn 0.0213 -0.8675 -0.4970
  vn 0.9539 0.0202 0.2995
  vn -0.9119 -0.1305 0.3891
  vn -0.2818 0.5969 0.7512
  vn -0.4032 0.5148 0.7566
  vn 0.3824 -0.6436 -0.6630
  vn 0.4490 -0.1352 -0.8833
  vn 0.3095 -0.1064 0.9449
  vn 0.2275 0.0632 0.9717
  vn 0.9878 -0.1548 0.0143
  vn 0.4936 -0.4026 0.7709
  vn 0.4193 -0.1798 0.8899
  vn 0.6319 -0.2139 0.7449
  vn 0.6439 -0.0683 0.7621
  vn 0.6804 -0.1013 0.7258
  vn -0.0977 0.4303 0.8974
  vn 0.4913 -0.1044 0.8647
  vn 0.8241 -0.0809 -0.5606
  vn -0.8741 0.4821 -0.0589
  vn -0.1748 0.0955 0.9800
  vn -0.1649 -0.9660 -0.1992
  vn -0.0714 -0.8423 -0.5342
  vn -0.5966 -0.7282 -0.3374
  vn -0.0096 0.8804 0.4741
  vn 0.6022 -0.3206 0.7312
  usemtl None
  s off
  f 3//1 2//1 4//1
  f 4//2 1//2 3//2
  f 175//3 127//3 50//3
  f 138//4 169//4 137//4
  f 69//5 66//5 68//5
  f 33//6 49//6 47//6
  f 7//7 6//7 4//7
  f 2//8 5//8 4//8
  f 5//9 1//9 4//9
  f 147//10 125//10 120//10
  f 168//11 112//11 147//11
  f 127//12 116//12 47//12
  f 107//13 124//13 147//13
  f 13//14 14//14 12//14
  f 102//15 101//15 103//15
  f 52//16 54//16 45//16
  f 17//17 15//17 16//17
  f 15//18 18//18 19//18
  f 17//19 13//19 15//19
  f 138//20 76//20 70//20
  f 18//21 20//21 19//21
  f 26//22 31//22 30//22
  f 30//23 31//23 32//23
  f 52//24 65//24 54//24
  f 156//25 148//25 152//25
  f 24//26 35//26 37//26
  f 26//27 44//27 39//27
  f 29//28 39//28 38//28
  f 40//29 38//29 39//29
  f 43//30 48//30 42//30
  f 42//31 48//31 41//31
  f 110//32 18//32 15//32
  f 43//33 40//33 42//33
  f 31//34 44//34 38//34
  f 172//35 170//35 114//35
  f 152//36 155//36 154//36
  f 76//37 64//37 82//37
  f 23//38 38//38 36//38
  f 26//39 29//39 38//39
  f 39//40 31//40 26//40
  f 31//41 40//41 32//41
  f 26//42 38//42 28//42
  f 58//43 57//43 56//43
  f 55//44 58//44 54//44
  f 65//45 68//45 66//45
  f 67//46 65//46 53//46
  f 56//47 59//47 58//47
  f 57//48 63//48 62//48
  f 58//49 60//49 54//49
  f 55//50 60//50 59//50
  f 63//51 65//51 62//51
  f 65//52 64//52 62//52
  f 65//53 59//53 60//53
  f 76//54 75//54 74//54
  f 64//55 74//55 72//55
  f 75//56 76//56 73//56
  f 75//57 54//57 73//57
  f 139//58 146//58 174//58
  f 98//59 103//59 101//59
  f 71//60 75//60 73//60
  f 76//61 71//61 73//61
  f 136//62 111//62 160//62
  f 81//63 76//63 82//63
  f 82//64 64//64 81//64
  f 79//65 80//65 82//65
  f 88//66 71//66 83//66
  f 70//67 76//67 81//67
  f 78//68 66//68 67//68
  f 78//69 68//69 66//69
  f 69//70 78//70 67//70
  f 78//71 64//71 68//71
  f 70//72 78//72 69//72
  f 86//73 77//73 84//73
  f 115//74 85//74 84//74
  f 21//75 115//75 86//75
  f 30//76 27//76 26//76
  f 71//77 76//77 83//77
  f 95//78 91//78 94//78
  f 102//79 91//79 95//79
  f 71//80 87//80 45//80
  f 97//81 98//81 101//81
  f 70//82 67//82 53//82
  f 100//83 99//83 94//83
  f 38//84 33//84 36//84
  f 162//85 151//85 159//85
  f 165//86 141//86 163//86
  f 164//87 165//87 163//87
  f 90//88 49//88 87//88
  f 169//89 136//89 137//89
  f 113//90 20//90 18//90
  f 22//91 169//91 114//91
  f 120//92 131//92 106//92
  f 63//93 64//93 59//93
  f 11//94 7//94 5//94
  f 119//95 120//95 106//95
  f 121//96 122//96 120//96
  f 120//97 123//97 121//97
  f 132//98 123//98 124//98
  f 106//99 130//99 117//99
  f 72//100 61//100 64//100
  f 91//101 102//101 104//101
  f 8//102 33//102 34//102
  f 133//103 132//103 121//103
  f 132//104 133//104 130//104
  f 132//105 122//105 135//105
  f 125//106 134//106 135//106
  f 106//107 131//107 130//107
  f 15//108 13//108 110//108
  f 134//109 122//109 123//109
  f 122//110 133//110 120//110
  f 137//111 139//111 138//111
  f 116//112 34//112 46//112
  f 128//113 116//113 127//113
  f 172//114 171//114 115//114
  f 139//115 144//115 145//115
  f 142//116 144//116 137//116
  f 141//117 139//117 145//117
  f 141//118 145//118 144//118
  f 141//119 144//119 143//119
  f 139//120 137//120 144//120
  f 142//121 137//121 140//121
  f 174//122 175//122 89//122
  f 156//123 154//123 155//123
  f 154//124 156//124 152//124
  f 157//125 158//125 149//125
  f 160//126 158//126 159//126
  f 157//127 149//127 150//127
  f 149//128 159//128 151//128
  f 151//129 157//129 150//129
  f 162//130 158//130 161//130
  f 162//131 160//131 159//131
  f 156//132 151//132 150//132
  f 160//133 167//133 161//133
  f 156//134 160//134 162//134
  f 159//135 156//135 162//135
  f 139//136 166//136 164//136
  f 163//137 167//137 164//137
  f 167//138 166//138 164//138
  f 161//139 167//139 165//139
  f 137//140 153//140 155//140
  f 166//141 146//141 164//141
  f 167//142 146//142 166//142
  f 129//143 175//143 174//143
  f 140//144 155//144 153//144
  f 156//145 136//145 160//145
  f 137//146 136//146 153//146
  f 169//147 171//147 170//147
  f 171//148 172//148 173//148
  f 169//149 173//149 172//149
  f 171//150 85//150 115//150
  f 74//151 73//151 72//151
  f 169//152 170//152 173//152
  f 115//153 21//153 114//153
  f 174//154 168//154 129//154
  f 77//155 22//155 21//155
  f 108//156 13//156 12//156
  f 4//157 3//157 7//157
  f 7//158 3//158 1//158
  f 138//159 70//159 77//159
  f 154//160 148//160 141//160
  f 3//161 4//161 6//161
  f 108//162 104//162 109//162
  f 7//163 10//163 9//163
  f 118//164 130//164 133//164
  f 156//165 159//165 151//165
  f 114//166 21//166 22//166
  f 23//167 27//167 28//167
  f 27//168 32//168 29//168
  f 29//169 32//169 30//169
  f 28//170 29//170 26//170
  f 27//171 29//171 28//171
  f 29//172 40//172 39//172
  f 44//173 31//173 39//173
  f 43//174 44//174 48//174
  f 43//175 38//175 40//175
  f 128//176 175//176 129//176
  f 138//177 83//177 76//177
  f 35//178 24//178 23//178
  f 23//179 28//179 38//179
  f 30//180 40//180 29//180
  f 31//181 43//181 42//181
  f 31//182 42//182 40//182
  f 30//183 32//183 40//183
  f 38//184 43//184 31//184
  f 58//185 59//185 57//185
  f 55//186 59//186 58//186
  f 54//187 60//187 61//187
  f 56//188 62//188 63//188
  f 65//189 69//189 68//189
  f 67//190 69//190 65//190
  f 57//191 62//191 56//191
  f 56//192 63//192 59//192
  f 57//193 59//193 63//193
  f 58//194 59//194 60//194
  f 65//195 60//195 55//195
  f 64//196 66//196 68//196
  f 65//197 66//197 64//197
  f 61//198 60//198 59//198
  f 64//199 76//199 74//199
  f 72//200 73//200 54//200
  f 54//201 74//201 72//201
  f 75//202 71//202 54//202
  f 61//203 74//203 54//203
  f 81//204 82//204 80//204
  f 79//205 82//205 81//205
  f 64//206 79//206 81//206
  f 80//207 79//207 78//207
  f 70//208 81//208 80//208
  f 78//209 70//209 80//209
  f 78//210 79//210 64//210
  f 84//211 86//211 115//211
  f 86//212 85//212 77//212
  f 21//213 86//213 84//213
  f 21//214 84//214 77//214
  f 33//215 46//215 34//215
  f 92//216 94//216 91//216
  f 92//217 95//217 94//217
  f 100//218 94//218 95//218
  f 92//219 100//219 95//219
  f 102//220 99//220 100//220
  f 97//221 101//221 103//221
  f 93//222 103//222 101//222
  f 97//223 103//223 93//223
  f 126//224 9//224 116//224
  f 151//225 161//225 141//225
  f 125//226 124//226 120//226
  f 85//227 86//227 84//227
  f 109//228 110//228 13//228
  f 169//229 22//229 113//229
  f 19//230 113//230 22//230
  f 99//231 95//231 94//231
  f 119//232 106//232 126//232
  f 117//233 107//233 106//233
  f 107//234 117//234 118//234
  f 121//235 123//235 122//235
  f 124//236 123//236 120//236
  f 132//237 125//237 123//237
  f 91//238 108//238 12//238
  f 134//239 135//239 122//239
  f 122//240 132//240 131//240
  f 132//241 135//241 134//241
  f 125//242 132//242 134//242
  f 133//243 122//243 131//243
  f 118//244 133//244 121//244
  f 125//245 135//245 123//245
  f 123//246 135//246 134//246
  f 133//247 131//247 120//247
  f 49//248 33//248 48//248
  f 88//249 90//249 87//249
  f 142//250 145//250 144//250
  f 144//251 145//251 143//251
  f 143//252 145//252 142//252
  f 140//253 143//253 142//253
  f 141//254 143//254 140//254
  f 140//255 154//255 141//255
  f 151//256 150//256 149//256
  f 156//257 155//257 153//257
  f 157//258 159//258 158//258
  f 160//259 161//259 158//259
  f 149//260 158//260 159//260
  f 151//261 159//261 157//261
  f 162//262 159//262 158//262
  f 141//263 165//263 166//263
  f 139//264 141//264 166//264
  f 163//265 165//265 167//265
  f 161//266 165//266 163//266
  f 161//267 163//267 141//267
  f 139//268 164//268 146//268
  f 140//269 153//269 152//269
  f 137//270 155//270 140//270
  f 156//271 153//271 136//271
  f 115//272 173//272 172//272
  f 128//273 119//273 126//273
  f 171//274 173//274 170//274
  f 115//275 170//275 173//275
  f 41//276 43//276 42//276
  f 174//277 89//277 83//277
  f 168//278 167//278 160//278
  f 174//279 146//279 168//279
  f 50//280 90//280 175//280
  f 138//281 171//281 169//281
  f 69//282 67//282 66//282
  f 47//283 46//283 33//283
  f 96//284 106//284 105//284
  f 105//285 98//285 96//285
  f 106//286 107//286 105//286
  f 147//287 112//287 107//287
  f 112//288 105//288 107//288
  f 103//289 104//289 102//289
  f 102//290 100//290 101//290
  f 23//291 24//291 25//291
  f 23//292 25//292 26//292
  f 26//293 25//293 44//293
  f 26//294 27//294 23//294
  f 45//295 51//295 52//295
  f 51//296 16//296 52//296
  f 16//297 77//297 52//297
  f 54//298 71//298 45//298
  f 2//299 12//299 14//299
  f 16//300 14//300 17//300
  f 19//301 22//301 77//301
  f 77//302 16//302 19//302
  f 16//303 15//303 19//303
  f 52//304 53//304 65//304
  f 156//305 150//305 148//305
  f 44//306 41//306 38//306
  f 130//307 131//307 132//307
  f 8//308 34//308 116//308
  f 116//309 9//309 8//309
  f 51//310 45//310 25//310
  f 45//311 48//311 44//311
  f 25//312 45//312 44//312
  f 38//313 41//313 48//313
  f 10//314 7//314 11//314
  f 37//315 35//315 11//315
  f 35//316 10//316 11//316
  f 25//317 37//317 51//317
  f 37//318 11//318 51//318
  f 98//319 105//319 104//319
  f 172//320 173//320 170//320
  f 152//321 153//321 155//321
  f 127//322 175//322 128//322
  f 174//323 83//323 139//323
  f 83//324 138//324 139//324
  f 98//325 104//325 103//325
  f 36//326 35//326 23//326
  f 30//327 32//327 27//327
  f 111//328 110//328 109//328
  f 50//329 127//329 47//329
  f 71//330 88//330 87//330
  f 70//331 69//331 67//331
  f 147//332 119//332 128//332
  f 138//333 85//333 171//333
  f 38//334 48//334 33//334
  f 162//335 161//335 151//335
  f 65//336 63//336 59//336
  f 14//337 13//337 17//337
  f 160//338 111//338 112//338
  f 112//339 168//339 160//339
  f 118//340 121//340 132//340
  f 132//341 124//341 118//341
  f 124//342 107//342 118//342
  f 164//343 166//343 165//343
  f 169//344 172//344 114//344
  f 62//345 64//345 63//345
  f 64//346 61//346 59//346
  f 7//347 1//347 5//347
  f 5//348 14//348 11//348
  f 168//349 147//349 129//349
  f 72//350 74//350 61//350
  f 104//351 108//351 91//351
  f 2//352 14//352 5//352
  f 8//353 10//353 33//353
  f 97//354 93//354 98//354
  f 47//355 49//355 50//355
  f 49//356 90//356 50//356
  f 89//357 90//357 88//357
  f 54//358 65//358 55//358
  f 89//359 175//359 90//359
  f 147//360 120//360 119//360
  f 129//361 147//361 128//361
  f 48//362 45//362 87//362
  f 74//363 75//363 73//363
  f 33//364 10//364 36//364
  f 10//365 35//365 36//365
  f 116//366 46//366 47//366
  f 108//367 109//367 13//367
  f 85//368 138//368 77//368
  f 154//369 152//369 148//369
  f 104//370 112//370 109//370
  f 112//371 111//371 109//371
  f 116//372 128//372 126//372
  f 104//373 105//373 112//373
  f 16//374 51//374 14//374
  f 14//375 51//375 11//375
  f 101//376 100//376 93//376
  f 100//377 92//377 93//377
  f 92//378 91//378 93//378
  f 91//379 12//379 93//379
  f 12//380 2//380 6//380
  f 2//381 3//381 6//381
  f 93//382 9//382 98//382
  f 6//383 7//383 93//383
  f 12//384 6//384 93//384
  f 118//385 117//385 130//385
  f 37//386 25//386 24//386
  f 53//387 52//387 77//387
  f 77//388 70//388 53//388
  f 98//389 9//389 96//389
  f 126//390 96//390 9//390
  f 141//391 148//391 151//391
  f 148//392 150//392 151//392
  f 125//393 147//393 124//393
  f 114//394 170//394 115//394
  f 113//395 18//395 110//395
  f 110//396 111//396 113//396
  f 111//397 136//397 113//397
  f 136//398 169//398 113//398
  f 83//399 89//399 88//399
  f 99//400 102//400 95//400
  f 106//401 96//401 126//401
  f 48//402 87//402 49//402
  f 140//403 152//403 154//403
  f 10//404 8//404 9//404
  f 9//405 93//405 7//405
  f 41//406 44//406 43//406
  f 20//407 113//407 19//407
  f 168//408 146//408 167//408
`
  var lines = string.split("\n");
  var positions = [];
  var normals = [];
  var vertices = [];
  var indices = [];

  for ( var i = 0 ; i < lines.length ; i++ ) {
    var parts = lines[i].trimLeft().trimRight().split(' ');
    if ( parts.length > 0 ) {
      switch(parts[0]) {
        case 'v':  positions.push([
            parseFloat(parts[1]),
            parseFloat(parts[2]),
            parseFloat(parts[3])
          ]);
          break;
        case 'vn':
          normals.push([
              parseFloat(parts[1]),
              parseFloat(parts[2]),
              parseFloat(parts[3])
          ]);
          break;
        case 'f': {
          var f1 = parts[1].split('/');
          var f2 = parts[2].split('/');
          var f3 = parts[3].split('/');
          Array.prototype.push.apply(
            vertices, positions[parseInt(f1[0]) - 1]
          );
          Array.prototype.push.apply(
            vertices, positions[parseInt(f2[0]) - 1]
          );
          Array.prototype.push.apply(
            vertices, positions[parseInt(f3[0]) - 1]
          );
          // Indicies
          indices.push(parseInt(f1[0]) - 1)
          indices.push(parseInt(f2[0]) - 1)
          indices.push(parseInt(f3[0]) - 1)
          break;
        }
      }
    }
  }
  var vertexCount = vertices.length / 6;
  console.log("Loaded mesh with " + vertexCount + " vertices");
  return {
    primitiveType: 'TRIANGLES',
    vertices:  new Float32Array(vertices),
    vertexCount: vertexCount,
    indices: new Float32Array(indices),
    normals: flatten(normals)
  };
}

function keydown(ev) {
  switch (ev.keyCode) {
    case 39: // Right arrow key -> the positive rotation  around the y-axis
      currentAngle = (currentAngle + ANGLE_STEP) % 360;
      break;
    case 37: // Left arrow key -> the negative rotation  around the y-axis
      currentAngle = (currentAngle - ANGLE_STEP) % 360;
      break;
    default: return; // Skip drawing at no effective action
  }
  tick();
}
